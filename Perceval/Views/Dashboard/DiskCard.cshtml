@using Perceval.Utils
@model DiskViewModel

<div class="card card-rounded graph-card">
    <div class="card-body bg-green d-flex flex-column card-rounded-top card-body-max-height">
        <div class="d-flex flex-row">
            <div class="icon-shape text-white rounded-circle shadow bg-green-icon">
                <i class="fas fa-save"></i>
            </div>
            <div class="ml-3 mr-3">
                <h5 class="card-title">@Model.UsedDiskSpace GB used on @Model.TotalDiskSpace GB</h5>
            </div>
            <div class="usage-chart">
                <canvas id="disk-usage-chart" width="50" height="50"></canvas>
            </div>
        </div>
        <div class="d-flex flex-nowrap">
            @foreach (var (nameDisk, i) in @Model.NamesDisk.WithIndex())
            {
                <p class="card-text font-weight-light @(i != 0 ? "ml-2" : "")">@nameDisk</p>
            }
        </div>
    </div>
    <div class="card-body card-rounded-bottom">
        <canvas id="disk-chart"></canvas>
    </div>
</div>

<script>
var diskUsageConf = {
    type: 'doughnut',
    data: {
        datasets: [{
            data: [
                @Model.DiskUsage,
                1 - @Model.DiskUsage
            ],
            backgroundColor: [
                "#6ab04c",
                "#fffff"
            ],
            borderWidth: 0,
        }],
        labels: [
            'Used',
            'Free'
        ]
    },
    options: {
        cutoutPercentage: 80,
        responsive: true,
        legend: {
            display: false
        },
        animation: {
            animateScale: false,
            animateRotate: false
        },
        elements: {
            center: {
                text: `${parseInt(`${@Model.DiskUsage * 100}`, 10)}%`,
            }
        }
    }
};

var diskChartUsageCtx = document.getElementById('disk-usage-chart').getContext('2d');
new Chart(diskChartUsageCtx, diskUsageConf);


var diskChartCtx = document.getElementById('disk-chart').getContext('2d');
var diskConf = {
    type: 'bar',
    data: {
        labels: @Html.Raw(Json.Serialize(Model.DisksUsage.Select(d => d.Item1))),
        datasets: [{
            label: 'Used',
            backgroundColor: '#ff7979',
            borderColor: "#130f40",
            borderWidth: 2,
            stack: 'Stack 0',
            fill: false,
            data: @Html.Raw(Json.Serialize(Model.DisksUsage.Select(d => d.Item3 - d.Item2)))
        }, {
            label: 'Free',
            backgroundColor: '#c7ecee',
            borderColor: "#130f40",
            borderWidth: 2,
            stack: 'Stack 0',
            fill: false,
            data: @Html.Raw(Json.Serialize(Model.DisksUsage.Select(d => d.Item2)))

        }]
    },
    options: {
        responsive: true,
        legend: {
            display: false
        },
        animation: {
            duration: 0
        }
    }
}
new Chart(diskChartCtx, diskConf);
</script>